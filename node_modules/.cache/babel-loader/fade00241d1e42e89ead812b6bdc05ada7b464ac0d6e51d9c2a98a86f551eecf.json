{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { required, minLength, email, sameAs } from \"vuelidate/lib/validators\";\nexport default {\n  data: function data() {\n    return {\n      user: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        repeatPassword: \"\"\n      }\n    };\n  },\n  methods: {\n    reset: function reset() {\n      this.user.name = \"\";\n      this.user.email = \"\";\n      this.user.password = \"\";\n      this.user.repeatPassword = \"\";\n      this.$v.$reset();\n    },\n    onSubmit: function onSubmit() {\n      this.$v.$touch();\n      if (!this.$v.$invalid) {\n        var user = {\n          name: this.user.name,\n          email: this.user.email,\n          password: this.user.password,\n          repeatPassword: this.user.repeatPassword\n        };\n        console.log(user);\n        this.reset();\n      }\n    }\n  },\n  validations: {\n    user: {\n      name: {\n        required: required,\n        minLength: minLength(4)\n      },\n      email: {\n        required: required,\n        email: email\n      },\n      password: {\n        required: required,\n        minLength: minLength(6)\n      },\n      repeatPassword: {\n        required: required,\n        sameAsPassword: sameAs(\"password\")\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAmFA;AACA;EACAA;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;QACA;UACAN;UACAC;UACAC;UACAC;QACA;QACAI;QACA;MACA;IACA;EACA;EAEAC;IACAT;MACAC;QACAS;QACAC;MACA;MACAT;QACAQ;QACAR;MACA;MACAC;QACAO;QACAC;MACA;MACAP;QACAM;QACAE;MACA;IACA;EACA;AACA","names":["data","user","name","email","password","repeatPassword","methods","reset","onSubmit","console","validations","required","minLength","sameAsPassword"],"sourceRoot":"src/pages","sources":["Admin.vue"],"sourcesContent":["<template>\n  <section class=\"auth\">\n    <div class=\"container\">\n      <pre>{{ $v }}</pre>\n\n      <form class=\"auth__form\" @submit.prevent=\"onSubmit\">\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          required\n          placeholder=\"name\"\n          v-model=\"$v.user.name.$model\"\n          :class=\"{ 'form-group--error': $v.user.name.$error }\"\n          @change=\"$v.user.name.$touch()\"\n        />\n        <div\n          class=\"input-errors\"\n          v-for=\"(error, index) of $v.user.name.$error\"\n          :key=\"index\"\n        >\n          <div class=\"error-msg\">{{ error.$message }}</div>\n        </div>\n        <!--  <div class=\"error-msg\" v-if=\"!$v.user.name.required\">\n          Field is required\n        </div>\n        <div class=\"error-msg\" v-if=\"!$v.user.name.minLength\">\n          Name must have at least\n          {{ $v.user.name.$params.minLength.min }} letters.\n        </div> -->\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          required\n          placeholder=\"email\"\n          v-model=\"$v.user.email.$model\"\n          :class=\"{ 'form-group--error': $v.user.email.$error }\"\n          @change=\"$v.user.email.$touch()\"\n        />\n        <div class=\"error-msg\" v-if=\"!$v.user.email.required\">\n          Field is required\n        </div>\n        <div class=\"error-msg\" v-if=\"!$v.user.email.email\">\n          This must be an email\n        </div>\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          required\n          placeholder=\"password\"\n          v-model=\"$v.user.password.$model\"\n          :class=\"{ 'form-group--error': $v.user.password.$error }\"\n          @change=\"$v.user.password.$touch()\"\n        />\n        <div class=\"error-msg\" v-if=\"!$v.user.password.required\">\n          Field is required\n        </div>\n        <div class=\"error-msg\" v-if=\"!$v.user.password.minLength\">\n          Name must have at least\n          {{ $v.user.password.$params.minLength.min }} letters.\n        </div>\n        <label>Repeat password:</label>\n        <input\n          type=\"repeatPassword\"\n          required\n          placeholder=\"password\"\n          v-model=\"$v.user.repeatPassword.$model\"\n          :class=\"{ 'form-group--error': $v.user.repeatPassword.$error }\"\n          @change=\"$v.user.repeatPassword.$touch()\"\n        />\n        <div class=\"error-msg\" v-if=\"!$v.user.repeatPassword.required\">\n          Field is required\n        </div>\n        <div class=\"error-msg\" v-if=\"!$v.user.repeatPassword.sameAsPassword\">\n          Passwords must match\n        </div>\n\n        <button type=\"submit\" class=\"btn\">Submit</button>\n      </form>\n    </div>\n  </section>\n</template>\n\n<script>\nimport { required, minLength, email, sameAs } from \"vuelidate/lib/validators\";\nexport default {\n  data() {\n    return {\n      user: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        repeatPassword: \"\",\n      },\n    };\n  },\n  methods: {\n    reset() {\n      this.user.name = \"\";\n      this.user.email = \"\";\n      this.user.password = \"\";\n      this.user.repeatPassword = \"\";\n      this.$v.$reset();\n    },\n\n    onSubmit() {\n      this.$v.$touch();\n      if (!this.$v.$invalid) {\n        const user = {\n          name: this.user.name,\n          email: this.user.email,\n          password: this.user.password,\n          repeatPassword: this.user.repeatPassword,\n        };\n        console.log(user);\n        this.reset();\n      }\n    },\n  },\n\n  validations: {\n    user: {\n      name: {\n        required,\n        minLength: minLength(4),\n      },\n      email: {\n        required,\n        email,\n      },\n      password: {\n        required,\n        minLength: minLength(6),\n      },\n      repeatPassword: {\n        required,\n        sameAsPassword: sameAs(\"password\"),\n      },\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.examp {\n  margin-top: 100px;\n}\n.auth__form {\n  margin-top: 100px;\n}\ninput.error {\n  border-color: red;\n}\n.error-msg {\n  color: red;\n  font-weight: 1000;\n  font-style: italic;\n  margin-bottom: 8px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}